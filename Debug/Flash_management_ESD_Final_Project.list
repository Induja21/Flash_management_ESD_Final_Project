
Flash_management_ESD_Final_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c9c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001e34  08001e34  00002e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e44  08001e44  0000300c  2**0
                  CONTENTS
  4 .ARM          00000008  08001e44  08001e44  00002e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001e4c  08001e4c  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e4c  08001e4c  00002e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001e50  08001e50  00002e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001e54  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  2000000c  08001e60  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08001e60  000030dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005e4a  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000149f  00000000  00000000  00008e86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000648  00000000  00000000  0000a328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004a2  00000000  00000000  0000a970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000149b0  00000000  00000000  0000ae12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000074d5  00000000  00000000  0001f7c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081508  00000000  00000000  00026c97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a819f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001860  00000000  00000000  000a81e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  000a9a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001e1c 	.word	0x08001e1c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08001e1c 	.word	0x08001e1c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <m78a_micro_device_reset>:

	    hal_status = HAL_SPI_TransmitReceive(&spihandler, &tx_buffer, &rx_buffer, 3, SPI_TIMEOUT);
}

static void m78a_micro_device_reset(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af02      	add	r7, sp, #8
	uint8_t tx_buff[1] = { M78A_CMD_RESET };
 80004ce:	23ff      	movs	r3, #255	@ 0xff
 80004d0:	713b      	strb	r3, [r7, #4]
	uint8_t rx_buff[1] = { 0 };
 80004d2:	2300      	movs	r3, #0
 80004d4:	703b      	strb	r3, [r7, #0]
	HAL_SPI_TransmitReceive(&spihandler, &tx_buff, &rx_buff, 1, SPI_TIMEOUT);
 80004d6:	463a      	mov	r2, r7
 80004d8:	1d39      	adds	r1, r7, #4
 80004da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004de:	9300      	str	r3, [sp, #0]
 80004e0:	2301      	movs	r3, #1
 80004e2:	4803      	ldr	r0, [pc, #12]	@ (80004f0 <m78a_micro_device_reset+0x28>)
 80004e4:	f001 f9db 	bl	800189e <HAL_SPI_TransmitReceive>
}
 80004e8:	bf00      	nop
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000028 	.word	0x20000028

080004f4 <m78a_micro_read_reg>:

uint8_t m78a_micro_read_reg(uint8_t reg)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b088      	sub	sp, #32
 80004f8:	af02      	add	r7, sp, #8
 80004fa:	4603      	mov	r3, r0
 80004fc:	71fb      	strb	r3, [r7, #7]
	uint8_t tx_buff[4] = { 0 };
 80004fe:	2300      	movs	r3, #0
 8000500:	613b      	str	r3, [r7, #16]
	uint8_t rx_buff[4] = { 0 };
 8000502:	2300      	movs	r3, #0
 8000504:	60fb      	str	r3, [r7, #12]
    HAL_StatusTypeDef hal_status;

    tx_buff[0] = M78A_CMD_RD_REG;
 8000506:	230f      	movs	r3, #15
 8000508:	743b      	strb	r3, [r7, #16]
    tx_buff[1] = reg;
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	747b      	strb	r3, [r7, #17]


    hal_status = HAL_SPI_TransmitReceive(&spihandler, &tx_buff, &rx_buff, 4, SPI_TIMEOUT);
 800050e:	f107 020c 	add.w	r2, r7, #12
 8000512:	f107 0110 	add.w	r1, r7, #16
 8000516:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	2304      	movs	r3, #4
 800051e:	4805      	ldr	r0, [pc, #20]	@ (8000534 <m78a_micro_read_reg+0x40>)
 8000520:	f001 f9bd 	bl	800189e <HAL_SPI_TransmitReceive>
 8000524:	4603      	mov	r3, r0
 8000526:	75fb      	strb	r3, [r7, #23]

    return rx_buff[0];
 8000528:	7b3b      	ldrb	r3, [r7, #12]

}
 800052a:	4618      	mov	r0, r3
 800052c:	3718      	adds	r7, #24
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	20000028 	.word	0x20000028

08000538 <m78a_micron_init>:

void m78a_micron_init(SPI_HandleTypeDef* spih)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
	spihandler = *spih;
 8000540:	4a07      	ldr	r2, [pc, #28]	@ (8000560 <m78a_micron_init+0x28>)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4610      	mov	r0, r2
 8000546:	4619      	mov	r1, r3
 8000548:	2358      	movs	r3, #88	@ 0x58
 800054a:	461a      	mov	r2, r3
 800054c:	f001 fc58 	bl	8001e00 <memcpy>
	//m78a_init_protect_reg();
	m78a_init_config_reg();
 8000550:	f000 f808 	bl	8000564 <m78a_init_config_reg>
	read_manufacturer_id();
 8000554:	f000 f814 	bl	8000580 <read_manufacturer_id>
}
 8000558:	bf00      	nop
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000028 	.word	0x20000028

08000564 <m78a_init_config_reg>:
	m78a_micron_write_reg(M78A_PROTECT_REG_ADDR, 0);
}


void m78a_init_config_reg()
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
    uint8_t read_val = 0;
 800056a:	2300      	movs	r3, #0
 800056c:	71fb      	strb	r3, [r7, #7]

    /*Initalise the Config Register
     * 1)Read from Config Register.
     * 2)Set the ECC-E and BUF
     * */
   read_val = m78a_micro_read_reg(M78A_CONFIG_REG_ADDR);
 800056e:	20b0      	movs	r0, #176	@ 0xb0
 8000570:	f7ff ffc0 	bl	80004f4 <m78a_micro_read_reg>
 8000574:	4603      	mov	r3, r0
 8000576:	71fb      	strb	r3, [r7, #7]
   // read_val |= M78A_REG_CONF_ECCE;
   // m78a_micron_write_reg(M78A_CONFIG_REG_ADDR, read_val);
  //  read_val = m78a_micro_read_reg(M78A_CONFIG_REG_ADDR);

}
 8000578:	bf00      	nop
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <read_manufacturer_id>:
//    info->device_id = recv_buff[3] << 8 | recv_buff[4];
//
//}

void read_manufacturer_id()
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af02      	add	r7, sp, #8
	uint8_t dummy_byte = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	73fb      	strb	r3, [r7, #15]

	HAL_StatusTypeDef hal_status;
	uint8_t tx_buffer[5] = { 0 };
 800058a:	2300      	movs	r3, #0
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	2300      	movs	r3, #0
 8000590:	733b      	strb	r3, [r7, #12]
   uint8_t rx_buffer[5] = { 0 };
 8000592:	2300      	movs	r3, #0
 8000594:	603b      	str	r3, [r7, #0]
 8000596:	2300      	movs	r3, #0
 8000598:	713b      	strb	r3, [r7, #4]

   tx_buffer[0] = 0x9F;
 800059a:	239f      	movs	r3, #159	@ 0x9f
 800059c:	723b      	strb	r3, [r7, #8]
   tx_buffer[1] = dummy_byte;
 800059e:	7bfb      	ldrb	r3, [r7, #15]
 80005a0:	727b      	strb	r3, [r7, #9]
   tx_buffer[2] = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	72bb      	strb	r3, [r7, #10]

   m78a_micro_device_reset();
 80005a6:	f7ff ff8f 	bl	80004c8 <m78a_micro_device_reset>
//   while((m78a_micro_read_reg(M78A_STATUS_REG_ADDR))&M78A_CMD_BUSY_STAT)
//   {;}
   HAL_Delay(1000);
 80005aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005ae:	f000 fa3b 	bl	8000a28 <HAL_Delay>

   hal_status = HAL_SPI_TransmitReceive(&spihandler, &tx_buffer, &rx_buffer, 5, SPI_TIMEOUT);
 80005b2:	463a      	mov	r2, r7
 80005b4:	f107 0108 	add.w	r1, r7, #8
 80005b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	2305      	movs	r3, #5
 80005c0:	4804      	ldr	r0, [pc, #16]	@ (80005d4 <read_manufacturer_id+0x54>)
 80005c2:	f001 f96c 	bl	800189e <HAL_SPI_TransmitReceive>
 80005c6:	4603      	mov	r3, r0
 80005c8:	73bb      	strb	r3, [r7, #14]
//   hal_status = HAL_SPI_Transmit(&spihandler, &tx_buffer, 2, SPI_TIMEOUT);
//   hal_status = HAL_SPI_Receive(&spihandler, rx_buffer, 5, SPI_TIMEOUT);
}
 80005ca:	bf00      	nop
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000028 	.word	0x20000028

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f000 f9b2 	bl	8000944 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f80c 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 f89e 	bl	8000724 <MX_GPIO_Init>
  MX_SPI1_Init();
 80005e8:	f000 f866 	bl	80006b8 <MX_SPI1_Init>
  m78a_micron_init(&hspi1);
 80005ec:	4802      	ldr	r0, [pc, #8]	@ (80005f8 <main+0x20>)
 80005ee:	f7ff ffa3 	bl	8000538 <m78a_micron_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f2:	bf00      	nop
 80005f4:	e7fd      	b.n	80005f2 <main+0x1a>
 80005f6:	bf00      	nop
 80005f8:	20000080 	.word	0x20000080

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b094      	sub	sp, #80	@ 0x50
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0320 	add.w	r3, r7, #32
 8000606:	2230      	movs	r2, #48	@ 0x30
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f001 fbcc 	bl	8001da8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	4b22      	ldr	r3, [pc, #136]	@ (80006b0 <SystemClock_Config+0xb4>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000628:	4a21      	ldr	r2, [pc, #132]	@ (80006b0 <SystemClock_Config+0xb4>)
 800062a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800062e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000630:	4b1f      	ldr	r3, [pc, #124]	@ (80006b0 <SystemClock_Config+0xb4>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000634:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	4b1c      	ldr	r3, [pc, #112]	@ (80006b4 <SystemClock_Config+0xb8>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a1b      	ldr	r2, [pc, #108]	@ (80006b4 <SystemClock_Config+0xb8>)
 8000646:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	4b19      	ldr	r3, [pc, #100]	@ (80006b4 <SystemClock_Config+0xb8>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000658:	2302      	movs	r3, #2
 800065a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065c:	2301      	movs	r3, #1
 800065e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000660:	2310      	movs	r3, #16
 8000662:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000664:	2300      	movs	r3, #0
 8000666:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 0320 	add.w	r3, r7, #32
 800066c:	4618      	mov	r0, r3
 800066e:	f000 fc69 	bl	8000f44 <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000678:	f000 f882 	bl	8000780 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067c:	230f      	movs	r3, #15
 800067e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000680:	2300      	movs	r3, #0
 8000682:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f000 fecc 	bl	8001434 <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006a2:	f000 f86d 	bl	8000780 <Error_Handler>
  }
}
 80006a6:	bf00      	nop
 80006a8:	3750      	adds	r7, #80	@ 0x50
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40007000 	.word	0x40007000

080006b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006bc:	4b17      	ldr	r3, [pc, #92]	@ (800071c <MX_SPI1_Init+0x64>)
 80006be:	4a18      	ldr	r2, [pc, #96]	@ (8000720 <MX_SPI1_Init+0x68>)
 80006c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006c2:	4b16      	ldr	r3, [pc, #88]	@ (800071c <MX_SPI1_Init+0x64>)
 80006c4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ca:	4b14      	ldr	r3, [pc, #80]	@ (800071c <MX_SPI1_Init+0x64>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006d0:	4b12      	ldr	r3, [pc, #72]	@ (800071c <MX_SPI1_Init+0x64>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006d6:	4b11      	ldr	r3, [pc, #68]	@ (800071c <MX_SPI1_Init+0x64>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	@ (800071c <MX_SPI1_Init+0x64>)
 80006de:	2200      	movs	r2, #0
 80006e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	@ (800071c <MX_SPI1_Init+0x64>)
 80006e4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80006e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006ea:	4b0c      	ldr	r3, [pc, #48]	@ (800071c <MX_SPI1_Init+0x64>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006f0:	4b0a      	ldr	r3, [pc, #40]	@ (800071c <MX_SPI1_Init+0x64>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006f6:	4b09      	ldr	r3, [pc, #36]	@ (800071c <MX_SPI1_Init+0x64>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006fc:	4b07      	ldr	r3, [pc, #28]	@ (800071c <MX_SPI1_Init+0x64>)
 80006fe:	2200      	movs	r2, #0
 8000700:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000702:	4b06      	ldr	r3, [pc, #24]	@ (800071c <MX_SPI1_Init+0x64>)
 8000704:	220a      	movs	r2, #10
 8000706:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000708:	4804      	ldr	r0, [pc, #16]	@ (800071c <MX_SPI1_Init+0x64>)
 800070a:	f001 f83f 	bl	800178c <HAL_SPI_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000714:	f000 f834 	bl	8000780 <Error_Handler>

  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000080 	.word	0x20000080
 8000720:	40013000 	.word	0x40013000

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000738:	2300      	movs	r3, #0
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <MX_GPIO_Init+0x54>)
 800073e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000740:	4a0d      	ldr	r2, [pc, #52]	@ (8000778 <MX_GPIO_Init+0x54>)
 8000742:	f043 0301 	orr.w	r3, r3, #1
 8000746:	6313      	str	r3, [r2, #48]	@ 0x30
 8000748:	4b0b      	ldr	r3, [pc, #44]	@ (8000778 <MX_GPIO_Init+0x54>)
 800074a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074c:	f003 0301 	and.w	r3, r3, #1
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	683b      	ldr	r3, [r7, #0]
//  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  // GPIO initialization structure


  // Configure PA4 as output
  GPIO_InitStruct.Pin = GPIO_PIN_4;          // Select PA4
 8000754:	2310      	movs	r3, #16
 8000756:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // Output Push-Pull mode
 8000758:	2301      	movs	r3, #1
 800075a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;        // No pull-up or pull-down
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW; // Low-speed GPIO
 8000760:	2300      	movs	r3, #0
 8000762:	613b      	str	r3, [r7, #16]

  // Initialize PA4 with the above settings
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	4619      	mov	r1, r3
 8000768:	4804      	ldr	r0, [pc, #16]	@ (800077c <MX_GPIO_Init+0x58>)
 800076a:	f000 fa67 	bl	8000c3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800076e:	bf00      	nop
 8000770:	3718      	adds	r7, #24
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40023800 	.word	0x40023800
 800077c:	40020000 	.word	0x40020000

08000780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000784:	b672      	cpsid	i
}
 8000786:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000788:	bf00      	nop
 800078a:	e7fd      	b.n	8000788 <Error_Handler+0x8>

0800078c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	4b10      	ldr	r3, [pc, #64]	@ (80007d8 <HAL_MspInit+0x4c>)
 8000798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800079a:	4a0f      	ldr	r2, [pc, #60]	@ (80007d8 <HAL_MspInit+0x4c>)
 800079c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80007a2:	4b0d      	ldr	r3, [pc, #52]	@ (80007d8 <HAL_MspInit+0x4c>)
 80007a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	603b      	str	r3, [r7, #0]
 80007b2:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <HAL_MspInit+0x4c>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b6:	4a08      	ldr	r2, [pc, #32]	@ (80007d8 <HAL_MspInit+0x4c>)
 80007b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80007be:	4b06      	ldr	r3, [pc, #24]	@ (80007d8 <HAL_MspInit+0x4c>)
 80007c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	40023800 	.word	0x40023800

080007dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	@ 0x28
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a19      	ldr	r2, [pc, #100]	@ (8000860 <HAL_SPI_MspInit+0x84>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d12b      	bne.n	8000856 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	4b18      	ldr	r3, [pc, #96]	@ (8000864 <HAL_SPI_MspInit+0x88>)
 8000804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000806:	4a17      	ldr	r2, [pc, #92]	@ (8000864 <HAL_SPI_MspInit+0x88>)
 8000808:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800080c:	6453      	str	r3, [r2, #68]	@ 0x44
 800080e:	4b15      	ldr	r3, [pc, #84]	@ (8000864 <HAL_SPI_MspInit+0x88>)
 8000810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000812:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	4b11      	ldr	r3, [pc, #68]	@ (8000864 <HAL_SPI_MspInit+0x88>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	4a10      	ldr	r2, [pc, #64]	@ (8000864 <HAL_SPI_MspInit+0x88>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	6313      	str	r3, [r2, #48]	@ 0x30
 800082a:	4b0e      	ldr	r3, [pc, #56]	@ (8000864 <HAL_SPI_MspInit+0x88>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000836:	23f0      	movs	r3, #240	@ 0xf0
 8000838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083a:	2302      	movs	r3, #2
 800083c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000842:	2303      	movs	r3, #3
 8000844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000846:	2305      	movs	r3, #5
 8000848:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	4619      	mov	r1, r3
 8000850:	4805      	ldr	r0, [pc, #20]	@ (8000868 <HAL_SPI_MspInit+0x8c>)
 8000852:	f000 f9f3 	bl	8000c3c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000856:	bf00      	nop
 8000858:	3728      	adds	r7, #40	@ 0x28
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40013000 	.word	0x40013000
 8000864:	40023800 	.word	0x40023800
 8000868:	40020000 	.word	0x40020000

0800086c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <NMI_Handler+0x4>

08000874 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <HardFault_Handler+0x4>

0800087c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <MemManage_Handler+0x4>

08000884 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <BusFault_Handler+0x4>

0800088c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <UsageFault_Handler+0x4>

08000894 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr

080008a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c2:	f000 f891 	bl	80009e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008d0:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <SystemInit+0x20>)
 80008d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008d6:	4a05      	ldr	r2, [pc, #20]	@ (80008ec <SystemInit+0x20>)
 80008d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80008f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000928 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008f4:	f7ff ffea 	bl	80008cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008f8:	480c      	ldr	r0, [pc, #48]	@ (800092c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008fa:	490d      	ldr	r1, [pc, #52]	@ (8000930 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000934 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000900:	e002      	b.n	8000908 <LoopCopyDataInit>

08000902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000906:	3304      	adds	r3, #4

08000908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800090c:	d3f9      	bcc.n	8000902 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800090e:	4a0a      	ldr	r2, [pc, #40]	@ (8000938 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000910:	4c0a      	ldr	r4, [pc, #40]	@ (800093c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000914:	e001      	b.n	800091a <LoopFillZerobss>

08000916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000918:	3204      	adds	r2, #4

0800091a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800091c:	d3fb      	bcc.n	8000916 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800091e:	f001 fa4b 	bl	8001db8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000922:	f7ff fe59 	bl	80005d8 <main>
  bx  lr    
 8000926:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000928:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800092c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000930:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000934:	08001e54 	.word	0x08001e54
  ldr r2, =_sbss
 8000938:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800093c:	200000dc 	.word	0x200000dc

08000940 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000940:	e7fe      	b.n	8000940 <ADC_IRQHandler>
	...

08000944 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000948:	4b0e      	ldr	r3, [pc, #56]	@ (8000984 <HAL_Init+0x40>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a0d      	ldr	r2, [pc, #52]	@ (8000984 <HAL_Init+0x40>)
 800094e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000952:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000954:	4b0b      	ldr	r3, [pc, #44]	@ (8000984 <HAL_Init+0x40>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a0a      	ldr	r2, [pc, #40]	@ (8000984 <HAL_Init+0x40>)
 800095a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800095e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000960:	4b08      	ldr	r3, [pc, #32]	@ (8000984 <HAL_Init+0x40>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a07      	ldr	r2, [pc, #28]	@ (8000984 <HAL_Init+0x40>)
 8000966:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800096a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800096c:	2003      	movs	r0, #3
 800096e:	f000 f931 	bl	8000bd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000972:	200f      	movs	r0, #15
 8000974:	f000 f808 	bl	8000988 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000978:	f7ff ff08 	bl	800078c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800097c:	2300      	movs	r3, #0
}
 800097e:	4618      	mov	r0, r3
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40023c00 	.word	0x40023c00

08000988 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000990:	4b12      	ldr	r3, [pc, #72]	@ (80009dc <HAL_InitTick+0x54>)
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	4b12      	ldr	r3, [pc, #72]	@ (80009e0 <HAL_InitTick+0x58>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	4619      	mov	r1, r3
 800099a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800099e:	fbb3 f3f1 	udiv	r3, r3, r1
 80009a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009a6:	4618      	mov	r0, r3
 80009a8:	f000 f93b 	bl	8000c22 <HAL_SYSTICK_Config>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
 80009b4:	e00e      	b.n	80009d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2b0f      	cmp	r3, #15
 80009ba:	d80a      	bhi.n	80009d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009bc:	2200      	movs	r2, #0
 80009be:	6879      	ldr	r1, [r7, #4]
 80009c0:	f04f 30ff 	mov.w	r0, #4294967295
 80009c4:	f000 f911 	bl	8000bea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009c8:	4a06      	ldr	r2, [pc, #24]	@ (80009e4 <HAL_InitTick+0x5c>)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ce:	2300      	movs	r3, #0
 80009d0:	e000      	b.n	80009d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000000 	.word	0x20000000
 80009e0:	20000008 	.word	0x20000008
 80009e4:	20000004 	.word	0x20000004

080009e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009ec:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <HAL_IncTick+0x20>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	461a      	mov	r2, r3
 80009f2:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <HAL_IncTick+0x24>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4413      	add	r3, r2
 80009f8:	4a04      	ldr	r2, [pc, #16]	@ (8000a0c <HAL_IncTick+0x24>)
 80009fa:	6013      	str	r3, [r2, #0]
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	20000008 	.word	0x20000008
 8000a0c:	200000d8 	.word	0x200000d8

08000a10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  return uwTick;
 8000a14:	4b03      	ldr	r3, [pc, #12]	@ (8000a24 <HAL_GetTick+0x14>)
 8000a16:	681b      	ldr	r3, [r3, #0]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	200000d8 	.word	0x200000d8

08000a28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a30:	f7ff ffee 	bl	8000a10 <HAL_GetTick>
 8000a34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a40:	d005      	beq.n	8000a4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a42:	4b0a      	ldr	r3, [pc, #40]	@ (8000a6c <HAL_Delay+0x44>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	461a      	mov	r2, r3
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a4e:	bf00      	nop
 8000a50:	f7ff ffde 	bl	8000a10 <HAL_GetTick>
 8000a54:	4602      	mov	r2, r0
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	68fa      	ldr	r2, [r7, #12]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d8f7      	bhi.n	8000a50 <HAL_Delay+0x28>
  {
  }
}
 8000a60:	bf00      	nop
 8000a62:	bf00      	nop
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000008 	.word	0x20000008

08000a70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	f003 0307 	and.w	r3, r3, #7
 8000a7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a80:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a86:	68ba      	ldr	r2, [r7, #8]
 8000a88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aa2:	4a04      	ldr	r2, [pc, #16]	@ (8000ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	60d3      	str	r3, [r2, #12]
}
 8000aa8:	bf00      	nop
 8000aaa:	3714      	adds	r7, #20
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000abc:	4b04      	ldr	r3, [pc, #16]	@ (8000ad0 <__NVIC_GetPriorityGrouping+0x18>)
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	0a1b      	lsrs	r3, r3, #8
 8000ac2:	f003 0307 	and.w	r3, r3, #7
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	6039      	str	r1, [r7, #0]
 8000ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	db0a      	blt.n	8000afe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	490c      	ldr	r1, [pc, #48]	@ (8000b20 <__NVIC_SetPriority+0x4c>)
 8000aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af2:	0112      	lsls	r2, r2, #4
 8000af4:	b2d2      	uxtb	r2, r2
 8000af6:	440b      	add	r3, r1
 8000af8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000afc:	e00a      	b.n	8000b14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	b2da      	uxtb	r2, r3
 8000b02:	4908      	ldr	r1, [pc, #32]	@ (8000b24 <__NVIC_SetPriority+0x50>)
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	f003 030f 	and.w	r3, r3, #15
 8000b0a:	3b04      	subs	r3, #4
 8000b0c:	0112      	lsls	r2, r2, #4
 8000b0e:	b2d2      	uxtb	r2, r2
 8000b10:	440b      	add	r3, r1
 8000b12:	761a      	strb	r2, [r3, #24]
}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	e000e100 	.word	0xe000e100
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b089      	sub	sp, #36	@ 0x24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	f003 0307 	and.w	r3, r3, #7
 8000b3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b3c:	69fb      	ldr	r3, [r7, #28]
 8000b3e:	f1c3 0307 	rsb	r3, r3, #7
 8000b42:	2b04      	cmp	r3, #4
 8000b44:	bf28      	it	cs
 8000b46:	2304      	movcs	r3, #4
 8000b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	3304      	adds	r3, #4
 8000b4e:	2b06      	cmp	r3, #6
 8000b50:	d902      	bls.n	8000b58 <NVIC_EncodePriority+0x30>
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	3b03      	subs	r3, #3
 8000b56:	e000      	b.n	8000b5a <NVIC_EncodePriority+0x32>
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b60:	69bb      	ldr	r3, [r7, #24]
 8000b62:	fa02 f303 	lsl.w	r3, r2, r3
 8000b66:	43da      	mvns	r2, r3
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	401a      	ands	r2, r3
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b70:	f04f 31ff 	mov.w	r1, #4294967295
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7a:	43d9      	mvns	r1, r3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b80:	4313      	orrs	r3, r2
         );
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3724      	adds	r7, #36	@ 0x24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
	...

08000b90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ba0:	d301      	bcc.n	8000ba6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e00f      	b.n	8000bc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd0 <SysTick_Config+0x40>)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bae:	210f      	movs	r1, #15
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	f7ff ff8e 	bl	8000ad4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bb8:	4b05      	ldr	r3, [pc, #20]	@ (8000bd0 <SysTick_Config+0x40>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bbe:	4b04      	ldr	r3, [pc, #16]	@ (8000bd0 <SysTick_Config+0x40>)
 8000bc0:	2207      	movs	r2, #7
 8000bc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	e000e010 	.word	0xe000e010

08000bd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f7ff ff47 	bl	8000a70 <__NVIC_SetPriorityGrouping>
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b086      	sub	sp, #24
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	60b9      	str	r1, [r7, #8]
 8000bf4:	607a      	str	r2, [r7, #4]
 8000bf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bfc:	f7ff ff5c 	bl	8000ab8 <__NVIC_GetPriorityGrouping>
 8000c00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	68b9      	ldr	r1, [r7, #8]
 8000c06:	6978      	ldr	r0, [r7, #20]
 8000c08:	f7ff ff8e 	bl	8000b28 <NVIC_EncodePriority>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c12:	4611      	mov	r1, r2
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff ff5d 	bl	8000ad4 <__NVIC_SetPriority>
}
 8000c1a:	bf00      	nop
 8000c1c:	3718      	adds	r7, #24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b082      	sub	sp, #8
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f7ff ffb0 	bl	8000b90 <SysTick_Config>
 8000c30:	4603      	mov	r3, r0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
	...

08000c3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b089      	sub	sp, #36	@ 0x24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
 8000c56:	e159      	b.n	8000f0c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c58:	2201      	movs	r2, #1
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	697a      	ldr	r2, [r7, #20]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f040 8148 	bne.w	8000f06 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f003 0303 	and.w	r3, r3, #3
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d005      	beq.n	8000c8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d130      	bne.n	8000cf0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	689b      	ldr	r3, [r3, #8]
 8000c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	2203      	movs	r2, #3
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	69ba      	ldr	r2, [r7, #24]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	68da      	ldr	r2, [r3, #12]
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	69ba      	ldr	r2, [r7, #24]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	69ba      	ldr	r2, [r7, #24]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	091b      	lsrs	r3, r3, #4
 8000cda:	f003 0201 	and.w	r2, r3, #1
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f003 0303 	and.w	r3, r3, #3
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d017      	beq.n	8000d2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	2203      	movs	r2, #3
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	4013      	ands	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	689a      	ldr	r2, [r3, #8]
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f003 0303 	and.w	r3, r3, #3
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d123      	bne.n	8000d80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	08da      	lsrs	r2, r3, #3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3208      	adds	r2, #8
 8000d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	f003 0307 	and.w	r3, r3, #7
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	220f      	movs	r2, #15
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	691a      	ldr	r2, [r3, #16]
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	08da      	lsrs	r2, r3, #3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3208      	adds	r2, #8
 8000d7a:	69b9      	ldr	r1, [r7, #24]
 8000d7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	2203      	movs	r2, #3
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	43db      	mvns	r3, r3
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	4013      	ands	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f003 0203 	and.w	r2, r3, #3
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	f000 80a2 	beq.w	8000f06 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	4b57      	ldr	r3, [pc, #348]	@ (8000f24 <HAL_GPIO_Init+0x2e8>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dca:	4a56      	ldr	r2, [pc, #344]	@ (8000f24 <HAL_GPIO_Init+0x2e8>)
 8000dcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dd2:	4b54      	ldr	r3, [pc, #336]	@ (8000f24 <HAL_GPIO_Init+0x2e8>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dde:	4a52      	ldr	r2, [pc, #328]	@ (8000f28 <HAL_GPIO_Init+0x2ec>)
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	089b      	lsrs	r3, r3, #2
 8000de4:	3302      	adds	r3, #2
 8000de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	f003 0303 	and.w	r3, r3, #3
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	220f      	movs	r2, #15
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a49      	ldr	r2, [pc, #292]	@ (8000f2c <HAL_GPIO_Init+0x2f0>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d019      	beq.n	8000e3e <HAL_GPIO_Init+0x202>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a48      	ldr	r2, [pc, #288]	@ (8000f30 <HAL_GPIO_Init+0x2f4>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d013      	beq.n	8000e3a <HAL_GPIO_Init+0x1fe>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a47      	ldr	r2, [pc, #284]	@ (8000f34 <HAL_GPIO_Init+0x2f8>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d00d      	beq.n	8000e36 <HAL_GPIO_Init+0x1fa>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a46      	ldr	r2, [pc, #280]	@ (8000f38 <HAL_GPIO_Init+0x2fc>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d007      	beq.n	8000e32 <HAL_GPIO_Init+0x1f6>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a45      	ldr	r2, [pc, #276]	@ (8000f3c <HAL_GPIO_Init+0x300>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d101      	bne.n	8000e2e <HAL_GPIO_Init+0x1f2>
 8000e2a:	2304      	movs	r3, #4
 8000e2c:	e008      	b.n	8000e40 <HAL_GPIO_Init+0x204>
 8000e2e:	2307      	movs	r3, #7
 8000e30:	e006      	b.n	8000e40 <HAL_GPIO_Init+0x204>
 8000e32:	2303      	movs	r3, #3
 8000e34:	e004      	b.n	8000e40 <HAL_GPIO_Init+0x204>
 8000e36:	2302      	movs	r3, #2
 8000e38:	e002      	b.n	8000e40 <HAL_GPIO_Init+0x204>
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e000      	b.n	8000e40 <HAL_GPIO_Init+0x204>
 8000e3e:	2300      	movs	r3, #0
 8000e40:	69fa      	ldr	r2, [r7, #28]
 8000e42:	f002 0203 	and.w	r2, r2, #3
 8000e46:	0092      	lsls	r2, r2, #2
 8000e48:	4093      	lsls	r3, r2
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e50:	4935      	ldr	r1, [pc, #212]	@ (8000f28 <HAL_GPIO_Init+0x2ec>)
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	089b      	lsrs	r3, r3, #2
 8000e56:	3302      	adds	r3, #2
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e5e:	4b38      	ldr	r3, [pc, #224]	@ (8000f40 <HAL_GPIO_Init+0x304>)
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	43db      	mvns	r3, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d003      	beq.n	8000e82 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e82:	4a2f      	ldr	r2, [pc, #188]	@ (8000f40 <HAL_GPIO_Init+0x304>)
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e88:	4b2d      	ldr	r3, [pc, #180]	@ (8000f40 <HAL_GPIO_Init+0x304>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	43db      	mvns	r3, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d003      	beq.n	8000eac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000eac:	4a24      	ldr	r2, [pc, #144]	@ (8000f40 <HAL_GPIO_Init+0x304>)
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000eb2:	4b23      	ldr	r3, [pc, #140]	@ (8000f40 <HAL_GPIO_Init+0x304>)
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ed6:	4a1a      	ldr	r2, [pc, #104]	@ (8000f40 <HAL_GPIO_Init+0x304>)
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000edc:	4b18      	ldr	r3, [pc, #96]	@ (8000f40 <HAL_GPIO_Init+0x304>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d003      	beq.n	8000f00 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f00:	4a0f      	ldr	r2, [pc, #60]	@ (8000f40 <HAL_GPIO_Init+0x304>)
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	61fb      	str	r3, [r7, #28]
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	2b0f      	cmp	r3, #15
 8000f10:	f67f aea2 	bls.w	8000c58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f14:	bf00      	nop
 8000f16:	bf00      	nop
 8000f18:	3724      	adds	r7, #36	@ 0x24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	40023800 	.word	0x40023800
 8000f28:	40013800 	.word	0x40013800
 8000f2c:	40020000 	.word	0x40020000
 8000f30:	40020400 	.word	0x40020400
 8000f34:	40020800 	.word	0x40020800
 8000f38:	40020c00 	.word	0x40020c00
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	40013c00 	.word	0x40013c00

08000f44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d101      	bne.n	8000f56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e267      	b.n	8001426 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d075      	beq.n	800104e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000f62:	4b88      	ldr	r3, [pc, #544]	@ (8001184 <HAL_RCC_OscConfig+0x240>)
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	f003 030c 	and.w	r3, r3, #12
 8000f6a:	2b04      	cmp	r3, #4
 8000f6c:	d00c      	beq.n	8000f88 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f6e:	4b85      	ldr	r3, [pc, #532]	@ (8001184 <HAL_RCC_OscConfig+0x240>)
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000f76:	2b08      	cmp	r3, #8
 8000f78:	d112      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f7a:	4b82      	ldr	r3, [pc, #520]	@ (8001184 <HAL_RCC_OscConfig+0x240>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000f86:	d10b      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f88:	4b7e      	ldr	r3, [pc, #504]	@ (8001184 <HAL_RCC_OscConfig+0x240>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d05b      	beq.n	800104c <HAL_RCC_OscConfig+0x108>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d157      	bne.n	800104c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e242      	b.n	8001426 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fa8:	d106      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x74>
 8000faa:	4b76      	ldr	r3, [pc, #472]	@ (8001184 <HAL_RCC_OscConfig+0x240>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a75      	ldr	r2, [pc, #468]	@ (8001184 <HAL_RCC_OscConfig+0x240>)
 8000fb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fb4:	6013      	str	r3, [r2, #0]
 8000fb6:	e01d      	b.n	8000ff4 <HAL_RCC_OscConfig+0xb0>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000fc0:	d10c      	bne.n	8000fdc <HAL_RCC_OscConfig+0x98>
 8000fc2:	4b70      	ldr	r3, [pc, #448]	@ (8001184 <HAL_RCC_OscConfig+0x240>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a6f      	ldr	r2, [pc, #444]	@ (8001184 <HAL_RCC_OscConfig+0x240>)
 8000fc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fcc:	6013      	str	r3, [r2, #0]
 8000fce:	4b6d      	ldr	r3, [pc, #436]	@ (8001184 <HAL_RCC_OscConfig+0x240>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a6c      	ldr	r2, [pc, #432]	@ (8001184 <HAL_RCC_OscConfig+0x240>)
 8000fd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fd8:	6013      	str	r3, [r2, #0]
 8000fda:	e00b      	b.n	8000ff4 <HAL_RCC_OscConfig+0xb0>
 8000fdc:	4b69      	ldr	r3, [pc, #420]	@ (8001184 <HAL_RCC_OscConfig+0x240>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a68      	ldr	r2, [pc, #416]	@ (8001184 <HAL_RCC_OscConfig+0x240>)
 8000fe2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fe6:	6013      	str	r3, [r2, #0]
 8000fe8:	4b66      	ldr	r3, [pc, #408]	@ (8001184 <HAL_RCC_OscConfig+0x240>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a65      	ldr	r2, [pc, #404]	@ (8001184 <HAL_RCC_OscConfig+0x240>)
 8000fee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ff2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d013      	beq.n	8001024 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ffc:	f7ff fd08 	bl	8000a10 <HAL_GetTick>
 8001000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001002:	e008      	b.n	8001016 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001004:	f7ff fd04 	bl	8000a10 <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	2b64      	cmp	r3, #100	@ 0x64
 8001010:	d901      	bls.n	8001016 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001012:	2303      	movs	r3, #3
 8001014:	e207      	b.n	8001426 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001016:	4b5b      	ldr	r3, [pc, #364]	@ (8001184 <HAL_RCC_OscConfig+0x240>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d0f0      	beq.n	8001004 <HAL_RCC_OscConfig+0xc0>
 8001022:	e014      	b.n	800104e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001024:	f7ff fcf4 	bl	8000a10 <HAL_GetTick>
 8001028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800102a:	e008      	b.n	800103e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800102c:	f7ff fcf0 	bl	8000a10 <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b64      	cmp	r3, #100	@ 0x64
 8001038:	d901      	bls.n	800103e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e1f3      	b.n	8001426 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800103e:	4b51      	ldr	r3, [pc, #324]	@ (8001184 <HAL_RCC_OscConfig+0x240>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1f0      	bne.n	800102c <HAL_RCC_OscConfig+0xe8>
 800104a:	e000      	b.n	800104e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800104c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	2b00      	cmp	r3, #0
 8001058:	d063      	beq.n	8001122 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800105a:	4b4a      	ldr	r3, [pc, #296]	@ (8001184 <HAL_RCC_OscConfig+0x240>)
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	f003 030c 	and.w	r3, r3, #12
 8001062:	2b00      	cmp	r3, #0
 8001064:	d00b      	beq.n	800107e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001066:	4b47      	ldr	r3, [pc, #284]	@ (8001184 <HAL_RCC_OscConfig+0x240>)
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800106e:	2b08      	cmp	r3, #8
 8001070:	d11c      	bne.n	80010ac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001072:	4b44      	ldr	r3, [pc, #272]	@ (8001184 <HAL_RCC_OscConfig+0x240>)
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d116      	bne.n	80010ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800107e:	4b41      	ldr	r3, [pc, #260]	@ (8001184 <HAL_RCC_OscConfig+0x240>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d005      	beq.n	8001096 <HAL_RCC_OscConfig+0x152>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d001      	beq.n	8001096 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e1c7      	b.n	8001426 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001096:	4b3b      	ldr	r3, [pc, #236]	@ (8001184 <HAL_RCC_OscConfig+0x240>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	691b      	ldr	r3, [r3, #16]
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	4937      	ldr	r1, [pc, #220]	@ (8001184 <HAL_RCC_OscConfig+0x240>)
 80010a6:	4313      	orrs	r3, r2
 80010a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010aa:	e03a      	b.n	8001122 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d020      	beq.n	80010f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010b4:	4b34      	ldr	r3, [pc, #208]	@ (8001188 <HAL_RCC_OscConfig+0x244>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ba:	f7ff fca9 	bl	8000a10 <HAL_GetTick>
 80010be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c0:	e008      	b.n	80010d4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010c2:	f7ff fca5 	bl	8000a10 <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d901      	bls.n	80010d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e1a8      	b.n	8001426 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001184 <HAL_RCC_OscConfig+0x240>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 0302 	and.w	r3, r3, #2
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d0f0      	beq.n	80010c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e0:	4b28      	ldr	r3, [pc, #160]	@ (8001184 <HAL_RCC_OscConfig+0x240>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	691b      	ldr	r3, [r3, #16]
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	4925      	ldr	r1, [pc, #148]	@ (8001184 <HAL_RCC_OscConfig+0x240>)
 80010f0:	4313      	orrs	r3, r2
 80010f2:	600b      	str	r3, [r1, #0]
 80010f4:	e015      	b.n	8001122 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010f6:	4b24      	ldr	r3, [pc, #144]	@ (8001188 <HAL_RCC_OscConfig+0x244>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010fc:	f7ff fc88 	bl	8000a10 <HAL_GetTick>
 8001100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001102:	e008      	b.n	8001116 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001104:	f7ff fc84 	bl	8000a10 <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b02      	cmp	r3, #2
 8001110:	d901      	bls.n	8001116 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e187      	b.n	8001426 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001116:	4b1b      	ldr	r3, [pc, #108]	@ (8001184 <HAL_RCC_OscConfig+0x240>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	2b00      	cmp	r3, #0
 8001120:	d1f0      	bne.n	8001104 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0308 	and.w	r3, r3, #8
 800112a:	2b00      	cmp	r3, #0
 800112c:	d036      	beq.n	800119c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d016      	beq.n	8001164 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001136:	4b15      	ldr	r3, [pc, #84]	@ (800118c <HAL_RCC_OscConfig+0x248>)
 8001138:	2201      	movs	r2, #1
 800113a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800113c:	f7ff fc68 	bl	8000a10 <HAL_GetTick>
 8001140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001142:	e008      	b.n	8001156 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001144:	f7ff fc64 	bl	8000a10 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b02      	cmp	r3, #2
 8001150:	d901      	bls.n	8001156 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e167      	b.n	8001426 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001156:	4b0b      	ldr	r3, [pc, #44]	@ (8001184 <HAL_RCC_OscConfig+0x240>)
 8001158:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	2b00      	cmp	r3, #0
 8001160:	d0f0      	beq.n	8001144 <HAL_RCC_OscConfig+0x200>
 8001162:	e01b      	b.n	800119c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001164:	4b09      	ldr	r3, [pc, #36]	@ (800118c <HAL_RCC_OscConfig+0x248>)
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800116a:	f7ff fc51 	bl	8000a10 <HAL_GetTick>
 800116e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001170:	e00e      	b.n	8001190 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001172:	f7ff fc4d 	bl	8000a10 <HAL_GetTick>
 8001176:	4602      	mov	r2, r0
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d907      	bls.n	8001190 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	e150      	b.n	8001426 <HAL_RCC_OscConfig+0x4e2>
 8001184:	40023800 	.word	0x40023800
 8001188:	42470000 	.word	0x42470000
 800118c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001190:	4b88      	ldr	r3, [pc, #544]	@ (80013b4 <HAL_RCC_OscConfig+0x470>)
 8001192:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001194:	f003 0302 	and.w	r3, r3, #2
 8001198:	2b00      	cmp	r3, #0
 800119a:	d1ea      	bne.n	8001172 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0304 	and.w	r3, r3, #4
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	f000 8097 	beq.w	80012d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011aa:	2300      	movs	r3, #0
 80011ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011ae:	4b81      	ldr	r3, [pc, #516]	@ (80013b4 <HAL_RCC_OscConfig+0x470>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d10f      	bne.n	80011da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	4b7d      	ldr	r3, [pc, #500]	@ (80013b4 <HAL_RCC_OscConfig+0x470>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c2:	4a7c      	ldr	r2, [pc, #496]	@ (80013b4 <HAL_RCC_OscConfig+0x470>)
 80011c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ca:	4b7a      	ldr	r3, [pc, #488]	@ (80013b4 <HAL_RCC_OscConfig+0x470>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011d6:	2301      	movs	r3, #1
 80011d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011da:	4b77      	ldr	r3, [pc, #476]	@ (80013b8 <HAL_RCC_OscConfig+0x474>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d118      	bne.n	8001218 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011e6:	4b74      	ldr	r3, [pc, #464]	@ (80013b8 <HAL_RCC_OscConfig+0x474>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a73      	ldr	r2, [pc, #460]	@ (80013b8 <HAL_RCC_OscConfig+0x474>)
 80011ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011f2:	f7ff fc0d 	bl	8000a10 <HAL_GetTick>
 80011f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f8:	e008      	b.n	800120c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011fa:	f7ff fc09 	bl	8000a10 <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e10c      	b.n	8001426 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800120c:	4b6a      	ldr	r3, [pc, #424]	@ (80013b8 <HAL_RCC_OscConfig+0x474>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001214:	2b00      	cmp	r3, #0
 8001216:	d0f0      	beq.n	80011fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d106      	bne.n	800122e <HAL_RCC_OscConfig+0x2ea>
 8001220:	4b64      	ldr	r3, [pc, #400]	@ (80013b4 <HAL_RCC_OscConfig+0x470>)
 8001222:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001224:	4a63      	ldr	r2, [pc, #396]	@ (80013b4 <HAL_RCC_OscConfig+0x470>)
 8001226:	f043 0301 	orr.w	r3, r3, #1
 800122a:	6713      	str	r3, [r2, #112]	@ 0x70
 800122c:	e01c      	b.n	8001268 <HAL_RCC_OscConfig+0x324>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	2b05      	cmp	r3, #5
 8001234:	d10c      	bne.n	8001250 <HAL_RCC_OscConfig+0x30c>
 8001236:	4b5f      	ldr	r3, [pc, #380]	@ (80013b4 <HAL_RCC_OscConfig+0x470>)
 8001238:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800123a:	4a5e      	ldr	r2, [pc, #376]	@ (80013b4 <HAL_RCC_OscConfig+0x470>)
 800123c:	f043 0304 	orr.w	r3, r3, #4
 8001240:	6713      	str	r3, [r2, #112]	@ 0x70
 8001242:	4b5c      	ldr	r3, [pc, #368]	@ (80013b4 <HAL_RCC_OscConfig+0x470>)
 8001244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001246:	4a5b      	ldr	r2, [pc, #364]	@ (80013b4 <HAL_RCC_OscConfig+0x470>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	6713      	str	r3, [r2, #112]	@ 0x70
 800124e:	e00b      	b.n	8001268 <HAL_RCC_OscConfig+0x324>
 8001250:	4b58      	ldr	r3, [pc, #352]	@ (80013b4 <HAL_RCC_OscConfig+0x470>)
 8001252:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001254:	4a57      	ldr	r2, [pc, #348]	@ (80013b4 <HAL_RCC_OscConfig+0x470>)
 8001256:	f023 0301 	bic.w	r3, r3, #1
 800125a:	6713      	str	r3, [r2, #112]	@ 0x70
 800125c:	4b55      	ldr	r3, [pc, #340]	@ (80013b4 <HAL_RCC_OscConfig+0x470>)
 800125e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001260:	4a54      	ldr	r2, [pc, #336]	@ (80013b4 <HAL_RCC_OscConfig+0x470>)
 8001262:	f023 0304 	bic.w	r3, r3, #4
 8001266:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d015      	beq.n	800129c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001270:	f7ff fbce 	bl	8000a10 <HAL_GetTick>
 8001274:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001276:	e00a      	b.n	800128e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001278:	f7ff fbca 	bl	8000a10 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001286:	4293      	cmp	r3, r2
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e0cb      	b.n	8001426 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800128e:	4b49      	ldr	r3, [pc, #292]	@ (80013b4 <HAL_RCC_OscConfig+0x470>)
 8001290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d0ee      	beq.n	8001278 <HAL_RCC_OscConfig+0x334>
 800129a:	e014      	b.n	80012c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800129c:	f7ff fbb8 	bl	8000a10 <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012a2:	e00a      	b.n	80012ba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012a4:	f7ff fbb4 	bl	8000a10 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e0b5      	b.n	8001426 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012ba:	4b3e      	ldr	r3, [pc, #248]	@ (80013b4 <HAL_RCC_OscConfig+0x470>)
 80012bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1ee      	bne.n	80012a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80012c6:	7dfb      	ldrb	r3, [r7, #23]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d105      	bne.n	80012d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012cc:	4b39      	ldr	r3, [pc, #228]	@ (80013b4 <HAL_RCC_OscConfig+0x470>)
 80012ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d0:	4a38      	ldr	r2, [pc, #224]	@ (80013b4 <HAL_RCC_OscConfig+0x470>)
 80012d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80012d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	f000 80a1 	beq.w	8001424 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012e2:	4b34      	ldr	r3, [pc, #208]	@ (80013b4 <HAL_RCC_OscConfig+0x470>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 030c 	and.w	r3, r3, #12
 80012ea:	2b08      	cmp	r3, #8
 80012ec:	d05c      	beq.n	80013a8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d141      	bne.n	800137a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012f6:	4b31      	ldr	r3, [pc, #196]	@ (80013bc <HAL_RCC_OscConfig+0x478>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fc:	f7ff fb88 	bl	8000a10 <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001304:	f7ff fb84 	bl	8000a10 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b02      	cmp	r3, #2
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e087      	b.n	8001426 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001316:	4b27      	ldr	r3, [pc, #156]	@ (80013b4 <HAL_RCC_OscConfig+0x470>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1f0      	bne.n	8001304 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	69da      	ldr	r2, [r3, #28]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a1b      	ldr	r3, [r3, #32]
 800132a:	431a      	orrs	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001330:	019b      	lsls	r3, r3, #6
 8001332:	431a      	orrs	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001338:	085b      	lsrs	r3, r3, #1
 800133a:	3b01      	subs	r3, #1
 800133c:	041b      	lsls	r3, r3, #16
 800133e:	431a      	orrs	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001344:	061b      	lsls	r3, r3, #24
 8001346:	491b      	ldr	r1, [pc, #108]	@ (80013b4 <HAL_RCC_OscConfig+0x470>)
 8001348:	4313      	orrs	r3, r2
 800134a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800134c:	4b1b      	ldr	r3, [pc, #108]	@ (80013bc <HAL_RCC_OscConfig+0x478>)
 800134e:	2201      	movs	r2, #1
 8001350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001352:	f7ff fb5d 	bl	8000a10 <HAL_GetTick>
 8001356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001358:	e008      	b.n	800136c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800135a:	f7ff fb59 	bl	8000a10 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d901      	bls.n	800136c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e05c      	b.n	8001426 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800136c:	4b11      	ldr	r3, [pc, #68]	@ (80013b4 <HAL_RCC_OscConfig+0x470>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0f0      	beq.n	800135a <HAL_RCC_OscConfig+0x416>
 8001378:	e054      	b.n	8001424 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800137a:	4b10      	ldr	r3, [pc, #64]	@ (80013bc <HAL_RCC_OscConfig+0x478>)
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001380:	f7ff fb46 	bl	8000a10 <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001388:	f7ff fb42 	bl	8000a10 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e045      	b.n	8001426 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800139a:	4b06      	ldr	r3, [pc, #24]	@ (80013b4 <HAL_RCC_OscConfig+0x470>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1f0      	bne.n	8001388 <HAL_RCC_OscConfig+0x444>
 80013a6:	e03d      	b.n	8001424 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d107      	bne.n	80013c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e038      	b.n	8001426 <HAL_RCC_OscConfig+0x4e2>
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40007000 	.word	0x40007000
 80013bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80013c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001430 <HAL_RCC_OscConfig+0x4ec>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d028      	beq.n	8001420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013d8:	429a      	cmp	r2, r3
 80013da:	d121      	bne.n	8001420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d11a      	bne.n	8001420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80013f0:	4013      	ands	r3, r2
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80013f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d111      	bne.n	8001420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001406:	085b      	lsrs	r3, r3, #1
 8001408:	3b01      	subs	r3, #1
 800140a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800140c:	429a      	cmp	r2, r3
 800140e:	d107      	bne.n	8001420 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800141a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800141c:	429a      	cmp	r2, r3
 800141e:	d001      	beq.n	8001424 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e000      	b.n	8001426 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40023800 	.word	0x40023800

08001434 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d101      	bne.n	8001448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e0cc      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001448:	4b68      	ldr	r3, [pc, #416]	@ (80015ec <HAL_RCC_ClockConfig+0x1b8>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0307 	and.w	r3, r3, #7
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	429a      	cmp	r2, r3
 8001454:	d90c      	bls.n	8001470 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001456:	4b65      	ldr	r3, [pc, #404]	@ (80015ec <HAL_RCC_ClockConfig+0x1b8>)
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800145e:	4b63      	ldr	r3, [pc, #396]	@ (80015ec <HAL_RCC_ClockConfig+0x1b8>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	429a      	cmp	r2, r3
 800146a:	d001      	beq.n	8001470 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e0b8      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d020      	beq.n	80014be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	2b00      	cmp	r3, #0
 8001486:	d005      	beq.n	8001494 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001488:	4b59      	ldr	r3, [pc, #356]	@ (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	4a58      	ldr	r2, [pc, #352]	@ (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 800148e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001492:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0308 	and.w	r3, r3, #8
 800149c:	2b00      	cmp	r3, #0
 800149e:	d005      	beq.n	80014ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014a0:	4b53      	ldr	r3, [pc, #332]	@ (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	4a52      	ldr	r2, [pc, #328]	@ (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 80014a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80014aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014ac:	4b50      	ldr	r3, [pc, #320]	@ (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	494d      	ldr	r1, [pc, #308]	@ (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d044      	beq.n	8001554 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d107      	bne.n	80014e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d2:	4b47      	ldr	r3, [pc, #284]	@ (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d119      	bne.n	8001512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e07f      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d003      	beq.n	80014f2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014ee:	2b03      	cmp	r3, #3
 80014f0:	d107      	bne.n	8001502 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014f2:	4b3f      	ldr	r3, [pc, #252]	@ (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d109      	bne.n	8001512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e06f      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001502:	4b3b      	ldr	r3, [pc, #236]	@ (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e067      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001512:	4b37      	ldr	r3, [pc, #220]	@ (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f023 0203 	bic.w	r2, r3, #3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	4934      	ldr	r1, [pc, #208]	@ (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001520:	4313      	orrs	r3, r2
 8001522:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001524:	f7ff fa74 	bl	8000a10 <HAL_GetTick>
 8001528:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800152a:	e00a      	b.n	8001542 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800152c:	f7ff fa70 	bl	8000a10 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	f241 3288 	movw	r2, #5000	@ 0x1388
 800153a:	4293      	cmp	r3, r2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e04f      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001542:	4b2b      	ldr	r3, [pc, #172]	@ (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f003 020c 	and.w	r2, r3, #12
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	429a      	cmp	r2, r3
 8001552:	d1eb      	bne.n	800152c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001554:	4b25      	ldr	r3, [pc, #148]	@ (80015ec <HAL_RCC_ClockConfig+0x1b8>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0307 	and.w	r3, r3, #7
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	429a      	cmp	r2, r3
 8001560:	d20c      	bcs.n	800157c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001562:	4b22      	ldr	r3, [pc, #136]	@ (80015ec <HAL_RCC_ClockConfig+0x1b8>)
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	b2d2      	uxtb	r2, r2
 8001568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800156a:	4b20      	ldr	r3, [pc, #128]	@ (80015ec <HAL_RCC_ClockConfig+0x1b8>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	429a      	cmp	r2, r3
 8001576:	d001      	beq.n	800157c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e032      	b.n	80015e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	2b00      	cmp	r3, #0
 8001586:	d008      	beq.n	800159a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001588:	4b19      	ldr	r3, [pc, #100]	@ (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	4916      	ldr	r1, [pc, #88]	@ (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001596:	4313      	orrs	r3, r2
 8001598:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0308 	and.w	r3, r3, #8
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d009      	beq.n	80015ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015a6:	4b12      	ldr	r3, [pc, #72]	@ (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	490e      	ldr	r1, [pc, #56]	@ (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015ba:	f000 f821 	bl	8001600 <HAL_RCC_GetSysClockFreq>
 80015be:	4602      	mov	r2, r0
 80015c0:	4b0b      	ldr	r3, [pc, #44]	@ (80015f0 <HAL_RCC_ClockConfig+0x1bc>)
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	091b      	lsrs	r3, r3, #4
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	490a      	ldr	r1, [pc, #40]	@ (80015f4 <HAL_RCC_ClockConfig+0x1c0>)
 80015cc:	5ccb      	ldrb	r3, [r1, r3]
 80015ce:	fa22 f303 	lsr.w	r3, r2, r3
 80015d2:	4a09      	ldr	r2, [pc, #36]	@ (80015f8 <HAL_RCC_ClockConfig+0x1c4>)
 80015d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80015d6:	4b09      	ldr	r3, [pc, #36]	@ (80015fc <HAL_RCC_ClockConfig+0x1c8>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff f9d4 	bl	8000988 <HAL_InitTick>

  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40023c00 	.word	0x40023c00
 80015f0:	40023800 	.word	0x40023800
 80015f4:	08001e34 	.word	0x08001e34
 80015f8:	20000000 	.word	0x20000000
 80015fc:	20000004 	.word	0x20000004

08001600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001604:	b090      	sub	sp, #64	@ 0x40
 8001606:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001608:	2300      	movs	r3, #0
 800160a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800160c:	2300      	movs	r3, #0
 800160e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001610:	2300      	movs	r3, #0
 8001612:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001614:	2300      	movs	r3, #0
 8001616:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001618:	4b59      	ldr	r3, [pc, #356]	@ (8001780 <HAL_RCC_GetSysClockFreq+0x180>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f003 030c 	and.w	r3, r3, #12
 8001620:	2b08      	cmp	r3, #8
 8001622:	d00d      	beq.n	8001640 <HAL_RCC_GetSysClockFreq+0x40>
 8001624:	2b08      	cmp	r3, #8
 8001626:	f200 80a1 	bhi.w	800176c <HAL_RCC_GetSysClockFreq+0x16c>
 800162a:	2b00      	cmp	r3, #0
 800162c:	d002      	beq.n	8001634 <HAL_RCC_GetSysClockFreq+0x34>
 800162e:	2b04      	cmp	r3, #4
 8001630:	d003      	beq.n	800163a <HAL_RCC_GetSysClockFreq+0x3a>
 8001632:	e09b      	b.n	800176c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001634:	4b53      	ldr	r3, [pc, #332]	@ (8001784 <HAL_RCC_GetSysClockFreq+0x184>)
 8001636:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001638:	e09b      	b.n	8001772 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800163a:	4b53      	ldr	r3, [pc, #332]	@ (8001788 <HAL_RCC_GetSysClockFreq+0x188>)
 800163c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800163e:	e098      	b.n	8001772 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001640:	4b4f      	ldr	r3, [pc, #316]	@ (8001780 <HAL_RCC_GetSysClockFreq+0x180>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001648:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800164a:	4b4d      	ldr	r3, [pc, #308]	@ (8001780 <HAL_RCC_GetSysClockFreq+0x180>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d028      	beq.n	80016a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001656:	4b4a      	ldr	r3, [pc, #296]	@ (8001780 <HAL_RCC_GetSysClockFreq+0x180>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	099b      	lsrs	r3, r3, #6
 800165c:	2200      	movs	r2, #0
 800165e:	623b      	str	r3, [r7, #32]
 8001660:	627a      	str	r2, [r7, #36]	@ 0x24
 8001662:	6a3b      	ldr	r3, [r7, #32]
 8001664:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001668:	2100      	movs	r1, #0
 800166a:	4b47      	ldr	r3, [pc, #284]	@ (8001788 <HAL_RCC_GetSysClockFreq+0x188>)
 800166c:	fb03 f201 	mul.w	r2, r3, r1
 8001670:	2300      	movs	r3, #0
 8001672:	fb00 f303 	mul.w	r3, r0, r3
 8001676:	4413      	add	r3, r2
 8001678:	4a43      	ldr	r2, [pc, #268]	@ (8001788 <HAL_RCC_GetSysClockFreq+0x188>)
 800167a:	fba0 1202 	umull	r1, r2, r0, r2
 800167e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001680:	460a      	mov	r2, r1
 8001682:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001684:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001686:	4413      	add	r3, r2
 8001688:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800168a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800168c:	2200      	movs	r2, #0
 800168e:	61bb      	str	r3, [r7, #24]
 8001690:	61fa      	str	r2, [r7, #28]
 8001692:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001696:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800169a:	f7fe fd9d 	bl	80001d8 <__aeabi_uldivmod>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4613      	mov	r3, r2
 80016a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016a6:	e053      	b.n	8001750 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016a8:	4b35      	ldr	r3, [pc, #212]	@ (8001780 <HAL_RCC_GetSysClockFreq+0x180>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	099b      	lsrs	r3, r3, #6
 80016ae:	2200      	movs	r2, #0
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	617a      	str	r2, [r7, #20]
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80016ba:	f04f 0b00 	mov.w	fp, #0
 80016be:	4652      	mov	r2, sl
 80016c0:	465b      	mov	r3, fp
 80016c2:	f04f 0000 	mov.w	r0, #0
 80016c6:	f04f 0100 	mov.w	r1, #0
 80016ca:	0159      	lsls	r1, r3, #5
 80016cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016d0:	0150      	lsls	r0, r2, #5
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	ebb2 080a 	subs.w	r8, r2, sl
 80016da:	eb63 090b 	sbc.w	r9, r3, fp
 80016de:	f04f 0200 	mov.w	r2, #0
 80016e2:	f04f 0300 	mov.w	r3, #0
 80016e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80016ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80016ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80016f2:	ebb2 0408 	subs.w	r4, r2, r8
 80016f6:	eb63 0509 	sbc.w	r5, r3, r9
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	f04f 0300 	mov.w	r3, #0
 8001702:	00eb      	lsls	r3, r5, #3
 8001704:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001708:	00e2      	lsls	r2, r4, #3
 800170a:	4614      	mov	r4, r2
 800170c:	461d      	mov	r5, r3
 800170e:	eb14 030a 	adds.w	r3, r4, sl
 8001712:	603b      	str	r3, [r7, #0]
 8001714:	eb45 030b 	adc.w	r3, r5, fp
 8001718:	607b      	str	r3, [r7, #4]
 800171a:	f04f 0200 	mov.w	r2, #0
 800171e:	f04f 0300 	mov.w	r3, #0
 8001722:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001726:	4629      	mov	r1, r5
 8001728:	028b      	lsls	r3, r1, #10
 800172a:	4621      	mov	r1, r4
 800172c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001730:	4621      	mov	r1, r4
 8001732:	028a      	lsls	r2, r1, #10
 8001734:	4610      	mov	r0, r2
 8001736:	4619      	mov	r1, r3
 8001738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800173a:	2200      	movs	r2, #0
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	60fa      	str	r2, [r7, #12]
 8001740:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001744:	f7fe fd48 	bl	80001d8 <__aeabi_uldivmod>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	4613      	mov	r3, r2
 800174e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001750:	4b0b      	ldr	r3, [pc, #44]	@ (8001780 <HAL_RCC_GetSysClockFreq+0x180>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	0c1b      	lsrs	r3, r3, #16
 8001756:	f003 0303 	and.w	r3, r3, #3
 800175a:	3301      	adds	r3, #1
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001760:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001764:	fbb2 f3f3 	udiv	r3, r2, r3
 8001768:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800176a:	e002      	b.n	8001772 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800176c:	4b05      	ldr	r3, [pc, #20]	@ (8001784 <HAL_RCC_GetSysClockFreq+0x184>)
 800176e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001770:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001774:	4618      	mov	r0, r3
 8001776:	3740      	adds	r7, #64	@ 0x40
 8001778:	46bd      	mov	sp, r7
 800177a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800
 8001784:	00f42400 	.word	0x00f42400
 8001788:	017d7840 	.word	0x017d7840

0800178c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e07b      	b.n	8001896 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d108      	bne.n	80017b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80017ae:	d009      	beq.n	80017c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	61da      	str	r2, [r3, #28]
 80017b6:	e005      	b.n	80017c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d106      	bne.n	80017e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7fe fffc 	bl	80007dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2202      	movs	r2, #2
 80017e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80017fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800180c:	431a      	orrs	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	431a      	orrs	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	431a      	orrs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001834:	431a      	orrs	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800183e:	431a      	orrs	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a1b      	ldr	r3, [r3, #32]
 8001844:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001848:	ea42 0103 	orr.w	r1, r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001850:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	430a      	orrs	r2, r1
 800185a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	0c1b      	lsrs	r3, r3, #16
 8001862:	f003 0104 	and.w	r1, r3, #4
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800186a:	f003 0210 	and.w	r2, r3, #16
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	430a      	orrs	r2, r1
 8001874:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	69da      	ldr	r2, [r3, #28]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001884:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b08a      	sub	sp, #40	@ 0x28
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	60f8      	str	r0, [r7, #12]
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	607a      	str	r2, [r7, #4]
 80018aa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80018ac:	2301      	movs	r3, #1
 80018ae:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80018b0:	f7ff f8ae 	bl	8000a10 <HAL_GetTick>
 80018b4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80018bc:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80018c4:	887b      	ldrh	r3, [r7, #2]
 80018c6:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80018c8:	7ffb      	ldrb	r3, [r7, #31]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d00c      	beq.n	80018e8 <HAL_SPI_TransmitReceive+0x4a>
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80018d4:	d106      	bne.n	80018e4 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d102      	bne.n	80018e4 <HAL_SPI_TransmitReceive+0x46>
 80018de:	7ffb      	ldrb	r3, [r7, #31]
 80018e0:	2b04      	cmp	r3, #4
 80018e2:	d001      	beq.n	80018e8 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80018e4:	2302      	movs	r3, #2
 80018e6:	e17f      	b.n	8001be8 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d005      	beq.n	80018fa <HAL_SPI_TransmitReceive+0x5c>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d002      	beq.n	80018fa <HAL_SPI_TransmitReceive+0x5c>
 80018f4:	887b      	ldrh	r3, [r7, #2]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e174      	b.n	8001be8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001904:	2b01      	cmp	r3, #1
 8001906:	d101      	bne.n	800190c <HAL_SPI_TransmitReceive+0x6e>
 8001908:	2302      	movs	r3, #2
 800190a:	e16d      	b.n	8001be8 <HAL_SPI_TransmitReceive+0x34a>
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800191a:	b2db      	uxtb	r3, r3
 800191c:	2b04      	cmp	r3, #4
 800191e:	d003      	beq.n	8001928 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2205      	movs	r2, #5
 8001924:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2200      	movs	r2, #0
 800192c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	887a      	ldrh	r2, [r7, #2]
 8001938:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	887a      	ldrh	r2, [r7, #2]
 800193e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	887a      	ldrh	r2, [r7, #2]
 800194a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	887a      	ldrh	r2, [r7, #2]
 8001950:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2200      	movs	r2, #0
 8001956:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2200      	movs	r2, #0
 800195c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001968:	2b40      	cmp	r3, #64	@ 0x40
 800196a:	d007      	beq.n	800197c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800197a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001984:	d17e      	bne.n	8001a84 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d002      	beq.n	8001994 <HAL_SPI_TransmitReceive+0xf6>
 800198e:	8afb      	ldrh	r3, [r7, #22]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d16c      	bne.n	8001a6e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001998:	881a      	ldrh	r2, [r3, #0]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a4:	1c9a      	adds	r2, r3, #2
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	3b01      	subs	r3, #1
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80019b8:	e059      	b.n	8001a6e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d11b      	bne.n	8001a00 <HAL_SPI_TransmitReceive+0x162>
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d016      	beq.n	8001a00 <HAL_SPI_TransmitReceive+0x162>
 80019d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d113      	bne.n	8001a00 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019dc:	881a      	ldrh	r2, [r3, #0]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e8:	1c9a      	adds	r2, r3, #2
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	3b01      	subs	r3, #1
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d119      	bne.n	8001a42 <HAL_SPI_TransmitReceive+0x1a4>
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d014      	beq.n	8001a42 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	68da      	ldr	r2, [r3, #12]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a22:	b292      	uxth	r2, r2
 8001a24:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a2a:	1c9a      	adds	r2, r3, #2
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	3b01      	subs	r3, #1
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001a42:	f7fe ffe5 	bl	8000a10 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	6a3b      	ldr	r3, [r7, #32]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d80d      	bhi.n	8001a6e <HAL_SPI_TransmitReceive+0x1d0>
 8001a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a58:	d009      	beq.n	8001a6e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e0bc      	b.n	8001be8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d1a0      	bne.n	80019ba <HAL_SPI_TransmitReceive+0x11c>
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d19b      	bne.n	80019ba <HAL_SPI_TransmitReceive+0x11c>
 8001a82:	e082      	b.n	8001b8a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d002      	beq.n	8001a92 <HAL_SPI_TransmitReceive+0x1f4>
 8001a8c:	8afb      	ldrh	r3, [r7, #22]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d171      	bne.n	8001b76 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	330c      	adds	r3, #12
 8001a9c:	7812      	ldrb	r2, [r2, #0]
 8001a9e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa4:	1c5a      	adds	r2, r3, #1
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ab8:	e05d      	b.n	8001b76 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d11c      	bne.n	8001b02 <HAL_SPI_TransmitReceive+0x264>
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d017      	beq.n	8001b02 <HAL_SPI_TransmitReceive+0x264>
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d114      	bne.n	8001b02 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	330c      	adds	r3, #12
 8001ae2:	7812      	ldrb	r2, [r2, #0]
 8001ae4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aea:	1c5a      	adds	r2, r3, #1
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	3b01      	subs	r3, #1
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001afe:	2300      	movs	r3, #0
 8001b00:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d119      	bne.n	8001b44 <HAL_SPI_TransmitReceive+0x2a6>
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d014      	beq.n	8001b44 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	68da      	ldr	r2, [r3, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b2c:	1c5a      	adds	r2, r3, #1
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001b40:	2301      	movs	r3, #1
 8001b42:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001b44:	f7fe ff64 	bl	8000a10 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	6a3b      	ldr	r3, [r7, #32]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d803      	bhi.n	8001b5c <HAL_SPI_TransmitReceive+0x2be>
 8001b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b5a:	d102      	bne.n	8001b62 <HAL_SPI_TransmitReceive+0x2c4>
 8001b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d109      	bne.n	8001b76 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e038      	b.n	8001be8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d19c      	bne.n	8001aba <HAL_SPI_TransmitReceive+0x21c>
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d197      	bne.n	8001aba <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001b8a:	6a3a      	ldr	r2, [r7, #32]
 8001b8c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f000 f8b6 	bl	8001d00 <SPI_EndRxTxTransaction>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d008      	beq.n	8001bac <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2220      	movs	r2, #32
 8001b9e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e01d      	b.n	8001be8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d10a      	bne.n	8001bca <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	613b      	str	r3, [r7, #16]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	613b      	str	r3, [r7, #16]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e000      	b.n	8001be8 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8001be6:	2300      	movs	r3, #0
  }
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3728      	adds	r7, #40	@ 0x28
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b088      	sub	sp, #32
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	603b      	str	r3, [r7, #0]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001c00:	f7fe ff06 	bl	8000a10 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c08:	1a9b      	subs	r3, r3, r2
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001c10:	f7fe fefe 	bl	8000a10 <HAL_GetTick>
 8001c14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001c16:	4b39      	ldr	r3, [pc, #228]	@ (8001cfc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	015b      	lsls	r3, r3, #5
 8001c1c:	0d1b      	lsrs	r3, r3, #20
 8001c1e:	69fa      	ldr	r2, [r7, #28]
 8001c20:	fb02 f303 	mul.w	r3, r2, r3
 8001c24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001c26:	e054      	b.n	8001cd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c2e:	d050      	beq.n	8001cd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001c30:	f7fe feee 	bl	8000a10 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	69fa      	ldr	r2, [r7, #28]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d902      	bls.n	8001c46 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d13d      	bne.n	8001cc2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001c54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001c5e:	d111      	bne.n	8001c84 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c68:	d004      	beq.n	8001c74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c72:	d107      	bne.n	8001c84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001c82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c8c:	d10f      	bne.n	8001cae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001cac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e017      	b.n	8001cf2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	68ba      	ldr	r2, [r7, #8]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	bf0c      	ite	eq
 8001ce2:	2301      	moveq	r3, #1
 8001ce4:	2300      	movne	r3, #0
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	461a      	mov	r2, r3
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d19b      	bne.n	8001c28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3720      	adds	r7, #32
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000000 	.word	0x20000000

08001d00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b088      	sub	sp, #32
 8001d04:	af02      	add	r7, sp, #8
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	2201      	movs	r2, #1
 8001d14:	2102      	movs	r1, #2
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f7ff ff6a 	bl	8001bf0 <SPI_WaitFlagStateUntilTimeout>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d007      	beq.n	8001d32 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d26:	f043 0220 	orr.w	r2, r3, #32
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e032      	b.n	8001d98 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001d32:	4b1b      	ldr	r3, [pc, #108]	@ (8001da0 <SPI_EndRxTxTransaction+0xa0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a1b      	ldr	r2, [pc, #108]	@ (8001da4 <SPI_EndRxTxTransaction+0xa4>)
 8001d38:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3c:	0d5b      	lsrs	r3, r3, #21
 8001d3e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d42:	fb02 f303 	mul.w	r3, r2, r3
 8001d46:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001d50:	d112      	bne.n	8001d78 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	2180      	movs	r1, #128	@ 0x80
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f7ff ff47 	bl	8001bf0 <SPI_WaitFlagStateUntilTimeout>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d016      	beq.n	8001d96 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d6c:	f043 0220 	orr.w	r2, r3, #32
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e00f      	b.n	8001d98 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00a      	beq.n	8001d94 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	3b01      	subs	r3, #1
 8001d82:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d8e:	2b80      	cmp	r3, #128	@ 0x80
 8001d90:	d0f2      	beq.n	8001d78 <SPI_EndRxTxTransaction+0x78>
 8001d92:	e000      	b.n	8001d96 <SPI_EndRxTxTransaction+0x96>
        break;
 8001d94:	bf00      	nop
  }

  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3718      	adds	r7, #24
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20000000 	.word	0x20000000
 8001da4:	165e9f81 	.word	0x165e9f81

08001da8 <memset>:
 8001da8:	4402      	add	r2, r0
 8001daa:	4603      	mov	r3, r0
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d100      	bne.n	8001db2 <memset+0xa>
 8001db0:	4770      	bx	lr
 8001db2:	f803 1b01 	strb.w	r1, [r3], #1
 8001db6:	e7f9      	b.n	8001dac <memset+0x4>

08001db8 <__libc_init_array>:
 8001db8:	b570      	push	{r4, r5, r6, lr}
 8001dba:	4d0d      	ldr	r5, [pc, #52]	@ (8001df0 <__libc_init_array+0x38>)
 8001dbc:	4c0d      	ldr	r4, [pc, #52]	@ (8001df4 <__libc_init_array+0x3c>)
 8001dbe:	1b64      	subs	r4, r4, r5
 8001dc0:	10a4      	asrs	r4, r4, #2
 8001dc2:	2600      	movs	r6, #0
 8001dc4:	42a6      	cmp	r6, r4
 8001dc6:	d109      	bne.n	8001ddc <__libc_init_array+0x24>
 8001dc8:	4d0b      	ldr	r5, [pc, #44]	@ (8001df8 <__libc_init_array+0x40>)
 8001dca:	4c0c      	ldr	r4, [pc, #48]	@ (8001dfc <__libc_init_array+0x44>)
 8001dcc:	f000 f826 	bl	8001e1c <_init>
 8001dd0:	1b64      	subs	r4, r4, r5
 8001dd2:	10a4      	asrs	r4, r4, #2
 8001dd4:	2600      	movs	r6, #0
 8001dd6:	42a6      	cmp	r6, r4
 8001dd8:	d105      	bne.n	8001de6 <__libc_init_array+0x2e>
 8001dda:	bd70      	pop	{r4, r5, r6, pc}
 8001ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001de0:	4798      	blx	r3
 8001de2:	3601      	adds	r6, #1
 8001de4:	e7ee      	b.n	8001dc4 <__libc_init_array+0xc>
 8001de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dea:	4798      	blx	r3
 8001dec:	3601      	adds	r6, #1
 8001dee:	e7f2      	b.n	8001dd6 <__libc_init_array+0x1e>
 8001df0:	08001e4c 	.word	0x08001e4c
 8001df4:	08001e4c 	.word	0x08001e4c
 8001df8:	08001e4c 	.word	0x08001e4c
 8001dfc:	08001e50 	.word	0x08001e50

08001e00 <memcpy>:
 8001e00:	440a      	add	r2, r1
 8001e02:	4291      	cmp	r1, r2
 8001e04:	f100 33ff 	add.w	r3, r0, #4294967295
 8001e08:	d100      	bne.n	8001e0c <memcpy+0xc>
 8001e0a:	4770      	bx	lr
 8001e0c:	b510      	push	{r4, lr}
 8001e0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001e12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001e16:	4291      	cmp	r1, r2
 8001e18:	d1f9      	bne.n	8001e0e <memcpy+0xe>
 8001e1a:	bd10      	pop	{r4, pc}

08001e1c <_init>:
 8001e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e1e:	bf00      	nop
 8001e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e22:	bc08      	pop	{r3}
 8001e24:	469e      	mov	lr, r3
 8001e26:	4770      	bx	lr

08001e28 <_fini>:
 8001e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e2a:	bf00      	nop
 8001e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e2e:	bc08      	pop	{r3}
 8001e30:	469e      	mov	lr, r3
 8001e32:	4770      	bx	lr
